package com.example.sensorlogger.model

data class TelemetryUiState(
    val operatorId: String = "",
    val operatorName: String = "",
    val equipmentTag: String = "",
    val serviceRunning: Boolean = false,
    val localBrokerStatus: BrokerStatus = BrokerStatus.Disabled,
    val cloudBrokerStatus: BrokerStatus = BrokerStatus.Disabled,
    val brokerActiveEndpoint: String? = null,
    val sequence: Long = 0L,
    val queueSize: Int = 0,
    val lastLatitude: Float? = null,
    val lastLongitude: Float? = null,
    val lastSpeed: Float? = null,
    val lastArms: Float? = null,
    val lastAltitude: Float? = null,
    val lastAccuracy: Float? = null,
    val lastVerticalAccuracy: Float? = null,
    val lastSpeedAccuracy: Float? = null,
    val lastBearing: Float? = null,
    val lastBearingAccuracy: Float? = null,
    val lastProvider: String? = null,
    val satellitesVisible: Int? = null,
    val satellitesUsed: Int? = null,
    val cn0Average: Float? = null,
    val gnssElapsedRealtimeNanos: Long? = null,
    val hasL5: Boolean? = null,
    val hdop: Float? = null,
    val vdop: Float? = null,
    val pdop: Float? = null,
    val gnssRawSupported: Boolean? = null,
    val gnssRawCount: Int? = null,
    val lastAx: Float? = null,
    val lastAy: Float? = null,
    val lastAz: Float? = null,
    val lastGx: Float? = null,
    val lastGy: Float? = null,
    val lastGz: Float? = null,
    val lastPitch: Float? = null,
    val lastRoll: Float? = null,
    val lastYaw: Float? = null,
    val lastJerk: Float? = null,
    val lastYawRate: Float? = null,
    val imuSamples: Int? = null,
    val imuHz: Float? = null,
    val baroPressureHpa: Float? = null,
    val baroAltitudeMeters: Float? = null,
    val permissionsGranted: Boolean = false,
    val nmeaEnabled: Boolean = true,
    val lastUpdatedMillis: Long = 0L,
    val lastMessageTimestampUtc: Long = 0L,

    val gnssCn0Min: Float? = null,
    val gnssCn0Max: Float? = null,
    val gnssCn0P25: Float? = null,
    val gnssCn0P50: Float? = null,
    val gnssCn0P75: Float? = null,
    val gnssGpsVisible: Int? = null,
    val gnssGpsUsed: Int? = null,
    val gnssGlonassVisible: Int? = null,
    val gnssGlonassUsed: Int? = null,
    val gnssGalileoVisible: Int? = null,
    val gnssGalileoUsed: Int? = null,
    val gnssBeidouVisible: Int? = null,
    val gnssBeidouUsed: Int? = null,
    val gnssQzssVisible: Int? = null,
    val gnssQzssUsed: Int? = null,
    val gnssSbasVisible: Int? = null,
    val gnssSbasUsed: Int? = null,
    val gnssRawGpsCount: Int? = null,
    val gnssRawGlonassCount: Int? = null,
    val gnssRawGalileoCount: Int? = null,
    val gnssRawBeidouCount: Int? = null,
    val gnssRawQzssCount: Int? = null,
    val gnssRawSbasCount: Int? = null,

    val imuQuaternionW: Float? = null,
    val imuQuaternionX: Float? = null,
    val imuQuaternionY: Float? = null,
    val imuQuaternionZ: Float? = null,
    val imuAccelerometerAccuracy: Int? = null,
    val imuGyroscopeAccuracy: Int? = null,
    val imuRotationAccuracy: Int? = null,
    val imuMotionStationary: Boolean? = null,
    val imuMotionShockLevel: String? = null,
    val imuMotionShockScore: Float? = null,
    val linearAccXMean: Float? = null,
    val linearAccXRms: Float? = null,
    val linearAccXMin: Float? = null,
    val linearAccXMax: Float? = null,
    val linearAccXSigma: Float? = null,
    val linearAccYMean: Float? = null,
    val linearAccYRms: Float? = null,
    val linearAccYMin: Float? = null,
    val linearAccYMax: Float? = null,
    val linearAccYSigma: Float? = null,
    val linearAccZMean: Float? = null,
    val linearAccZRms: Float? = null,
    val linearAccZMin: Float? = null,
    val linearAccZMax: Float? = null,
    val linearAccZSigma: Float? = null,
    val linearAccNormRms: Float? = null,
    val linearAccNormSigma: Float? = null,
    val magnetometerXMean: Float? = null,
    val magnetometerXRms: Float? = null,
    val magnetometerXMin: Float? = null,
    val magnetometerXMax: Float? = null,
    val magnetometerXSigma: Float? = null,
    val magnetometerYMean: Float? = null,
    val magnetometerYRms: Float? = null,
    val magnetometerYMin: Float? = null,
    val magnetometerYMax: Float? = null,
    val magnetometerYSigma: Float? = null,
    val magnetometerZMean: Float? = null,
    val magnetometerZRms: Float? = null,
    val magnetometerZMin: Float? = null,
    val magnetometerZMax: Float? = null,
    val magnetometerZSigma: Float? = null,
    val magnetometerFieldStrength: Float? = null,
    val lastPayloadJson: String? = null
) {
    enum class BrokerStatus {
        Disabled,
        Connecting,
        Disconnected,
        Connected,
        Reconnecting,
        Failed
    }
}
