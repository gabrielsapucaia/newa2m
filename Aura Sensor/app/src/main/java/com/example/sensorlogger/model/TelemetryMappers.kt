package com.example.sensorlogger.model

import android.hardware.SensorManager

object TelemetryMappers {

    data class GnssExtras(
        val elapsedRealtimeNanos: Long? = null,
        val cn0Min: Float? = null,
        val cn0Max: Float? = null,
        val cn0Percentile25: Float? = null,
        val cn0Median: Float? = null,
        val cn0Percentile75: Float? = null,
        val gpsVisible: Int? = null,
        val gpsUsed: Int? = null,
        val glonassVisible: Int? = null,
        val glonassUsed: Int? = null,
        val galileoVisible: Int? = null,
        val galileoUsed: Int? = null,
        val beidouVisible: Int? = null,
        val beidouUsed: Int? = null,
        val qzssVisible: Int? = null,
        val qzssUsed: Int? = null,
        val sbasVisible: Int? = null,
        val sbasUsed: Int? = null,
        val rawGpsCount: Int? = null,
        val rawGlonassCount: Int? = null,
        val rawGalileoCount: Int? = null,
        val rawBeidouCount: Int? = null,
        val rawQzssCount: Int? = null,
        val rawSbasCount: Int? = null
    )

    data class ImuExtras(
        val quaternion: Quaternion? = null,
        val accelerometerAccuracy: Int = -1,
        val gyroscopeAccuracy: Int = -1,
        val rotationAccuracy: Int = -1,
        val stationary: Boolean? = null,
        val shockLevel: String? = null,
        val shockScore: Float? = null,
        val linearAccelerationStats: TripleAxisStats = TripleAxisStats.EMPTY,
        val linearAccelerationNorm: NormStats = NormStats.EMPTY,
        val magnetometerStats: TripleAxisStats = TripleAxisStats.EMPTY,
        val magnetometerNorm: NormStats = NormStats.EMPTY,
        val magnetometerFieldStrength: Float? = null
    )

    data class Extras(
        val equipmentTag: String? = null,
        val barometerPressureHpa: Float? = null,
        val barometerAltitudeMeters: Float? = null,
        val gnss: GnssExtras = GnssExtras(),
        val imu: ImuExtras = ImuExtras()
    )

    fun fromLegacy(
        payload: TelemetryPayload,
        imu: ImuSnapshot,
        extras: Extras = Extras()
    ): TelemetryPayloadV11 {
        val accelStats = imu.accelerationStats
        val gyroStats = imu.angularVelocityStats
        val jerkStats = imu.jerkStats
        val accNorm = imu.accelerationNormStats
        val gyroNorm = imu.angularVelocityNormStats
        val jerkNorm = imu.jerkNormStats

        return TelemetryPayloadV11(
            deviceId = payload.deviceId,
            operatorId = payload.operatorId,
            equipmentTag = payload.equipmentTag.ifBlank { extras.equipmentTag },
            sequenceId = payload.sequence,
            timestampEpoch = payload.timestampUtc,
            gnssElapsedRealtimeNanos = extras.gnss.elapsedRealtimeNanos,
            gnssFix = payload.provider,
            latitude = payload.latitude,
            longitude = payload.longitude,
            altitude = payload.altitude,
            speed = payload.speed,
            course = payload.bearing,
            hdop = payload.hdop,
            vdop = payload.vdop,
            pdop = payload.pdop,
            satellitesUsed = payload.satellitesUsed,
            cn0Average = payload.cn0Average,
            accuracyMeters = payload.accuracy,
            provider = payload.provider,
            verticalAccuracyMeters = payload.verticalAccuracyMeters.takeIf { it != 0f },
            speedAccuracyMps = payload.speedAccuracyMps.takeIf { it != 0f },
            bearingAccuracyDeg = payload.bearingAccuracyDeg.takeIf { it != 0f },
            satellitesVisible = payload.satellitesVisible,
            hasL5 = payload.hasL5,
            gnssRawSupported = payload.gnss_raw_supported,
            gnssRawCount = payload.gnss_raw_count.takeIf { it != 0 },
            cn0Min = extras.gnss.cn0Min,
            cn0Max = extras.gnss.cn0Max,
            cn0Percentile25 = extras.gnss.cn0Percentile25,
            cn0Median = extras.gnss.cn0Median,
            cn0Percentile75 = extras.gnss.cn0Percentile75,
            gpsVisible = extras.gnss.gpsVisible,
            gpsUsed = extras.gnss.gpsUsed,
            glonassVisible = extras.gnss.glonassVisible,
            glonassUsed = extras.gnss.glonassUsed,
            galileoVisible = extras.gnss.galileoVisible,
            galileoUsed = extras.gnss.galileoUsed,
            beidouVisible = extras.gnss.beidouVisible,
            beidouUsed = extras.gnss.beidouUsed,
            qzssVisible = extras.gnss.qzssVisible,
            qzssUsed = extras.gnss.qzssUsed,
            sbasVisible = extras.gnss.sbasVisible,
            sbasUsed = extras.gnss.sbasUsed,
            rawGpsCount = extras.gnss.rawGpsCount,
            rawGlonassCount = extras.gnss.rawGlonassCount,
            rawGalileoCount = extras.gnss.rawGalileoCount,
            rawBeidouCount = extras.gnss.rawBeidouCount,
            rawQzssCount = extras.gnss.rawQzssCount,
            rawSbasCount = extras.gnss.rawSbasCount,
            baroPressureHpa = extras.barometerPressureHpa,
            baroAltitudeMeters = extras.barometerAltitudeMeters,
            accNormRms = accNorm.rms ?: payload.a_rms_total,
            accNormSigma = accNorm.sigma,
            jerkNormRms = jerkNorm.rms ?: payload.jerk_rms,
            jerkNormSigma = jerkNorm.sigma,
            gyroNormRms = gyroNorm.rms,
            gyroNormSigma = gyroNorm.sigma,
            yawRateDegPerSec = imu.yawRateDegPerSec.takeIf { it != 0f },
            imuSamples = imu.sampleCount,
            imuFpsEffective = imu.effectiveHz,
            accXMean = accelStats.x.mean ?: payload.ax,
            accXRms = accelStats.x.rms,
            accXMin = accelStats.x.min,
            accXMax = accelStats.x.max,
            accXSigma = accelStats.x.sigma,
            accYMean = accelStats.y.mean ?: payload.ay,
            accYRms = accelStats.y.rms,
            accYMin = accelStats.y.min,
            accYMax = accelStats.y.max,
            accYSigma = accelStats.y.sigma,
            accZMean = accelStats.z.mean ?: payload.az,
            accZRms = accelStats.z.rms,
            accZMin = accelStats.z.min,
            accZMax = accelStats.z.max,
            accZSigma = accelStats.z.sigma,
            jerkXRms = jerkStats.xRms,
            jerkYRms = jerkStats.yRms,
            jerkZRms = jerkStats.zRms,
            gyroXMean = gyroStats.x.mean ?: payload.gx,
            gyroXRms = gyroStats.x.rms,
            gyroXMin = gyroStats.x.min,
            gyroXMax = gyroStats.x.max,
            gyroXSigma = gyroStats.x.sigma,
            gyroYMean = gyroStats.y.mean ?: payload.gy,
            gyroYRms = gyroStats.y.rms,
            gyroYMin = gyroStats.y.min,
            gyroYMax = gyroStats.y.max,
            gyroYSigma = gyroStats.y.sigma,
            gyroZMean = gyroStats.z.mean ?: payload.gz,
            gyroZRms = gyroStats.z.rms,
            gyroZMin = gyroStats.z.min,
            gyroZMax = gyroStats.z.max,
            gyroZSigma = gyroStats.z.sigma,
            pitchDeg = payload.pitch,
            rollDeg = payload.roll,
            yawDeg = payload.yaw,
            quaternionW = extras.imu.quaternion?.w,
            quaternionX = extras.imu.quaternion?.x,
            quaternionY = extras.imu.quaternion?.y,
            quaternionZ = extras.imu.quaternion?.z,
            accelerometerAccuracy = accuracyLabel(extras.imu.accelerometerAccuracy),
            gyroscopeAccuracy = accuracyLabel(extras.imu.gyroscopeAccuracy),
            rotationAccuracy = accuracyLabel(extras.imu.rotationAccuracy),
            motionStationary = extras.imu.stationary,
            motionShockLevel = extras.imu.shockLevel,
            motionShockScore = extras.imu.shockScore,
            linearAccNormRms = extras.imu.linearAccelerationNorm.rms,
            linearAccNormSigma = extras.imu.linearAccelerationNorm.sigma,
            linearAccXMean = extras.imu.linearAccelerationStats.x.mean,
            linearAccXRms = extras.imu.linearAccelerationStats.x.rms,
            linearAccXMin = extras.imu.linearAccelerationStats.x.min,
            linearAccXMax = extras.imu.linearAccelerationStats.x.max,
            linearAccXSigma = extras.imu.linearAccelerationStats.x.sigma,
            linearAccYMean = extras.imu.linearAccelerationStats.y.mean,
            linearAccYRms = extras.imu.linearAccelerationStats.y.rms,
            linearAccYMin = extras.imu.linearAccelerationStats.y.min,
            linearAccYMax = extras.imu.linearAccelerationStats.y.max,
            linearAccYSigma = extras.imu.linearAccelerationStats.y.sigma,
            linearAccZMean = extras.imu.linearAccelerationStats.z.mean,
            linearAccZRms = extras.imu.linearAccelerationStats.z.rms,
            linearAccZMin = extras.imu.linearAccelerationStats.z.min,
            linearAccZMax = extras.imu.linearAccelerationStats.z.max,
            linearAccZSigma = extras.imu.linearAccelerationStats.z.sigma,
            magnetometerXMean = extras.imu.magnetometerStats.x.mean,
            magnetometerXRms = extras.imu.magnetometerStats.x.rms,
            magnetometerXMin = extras.imu.magnetometerStats.x.min,
            magnetometerXMax = extras.imu.magnetometerStats.x.max,
            magnetometerXSigma = extras.imu.magnetometerStats.x.sigma,
            magnetometerYMean = extras.imu.magnetometerStats.y.mean,
            magnetometerYRms = extras.imu.magnetometerStats.y.rms,
            magnetometerYMin = extras.imu.magnetometerStats.y.min,
            magnetometerYMax = extras.imu.magnetometerStats.y.max,
            magnetometerYSigma = extras.imu.magnetometerStats.y.sigma,
            magnetometerZMean = extras.imu.magnetometerStats.z.mean,
            magnetometerZRms = extras.imu.magnetometerStats.z.rms,
            magnetometerZMin = extras.imu.magnetometerStats.z.min,
            magnetometerZMax = extras.imu.magnetometerStats.z.max,
            magnetometerZSigma = extras.imu.magnetometerStats.z.sigma,
            magnetometerFieldStrength = extras.imu.magnetometerFieldStrength
        )
    }

    private fun accuracyLabel(accuracy: Int): String? = when (accuracy) {
        SensorManager.SENSOR_STATUS_UNRELIABLE -> "unreliable"
        SensorManager.SENSOR_STATUS_ACCURACY_LOW -> "low"
        SensorManager.SENSOR_STATUS_ACCURACY_MEDIUM -> "medium"
        SensorManager.SENSOR_STATUS_ACCURACY_HIGH -> "high"
        else -> null
    }
}
